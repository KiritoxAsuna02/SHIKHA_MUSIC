import base64
exec(base64.b64decode(b"import requests
import json
import re
import io
import logging
from colorama import Fore, init
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from colored import fore, attr

def print_banner():
    box_width = 50
    light_red_border = fore('light_red')
    green_text = fore('light_green')
    cyan_text = fore('light_cyan')
    reset = attr('reset')

    # Create the banner content
    banner_content = f"""
{light_red_border}{"_" * box_width}{reset}
{light_red_border}|{" " * (box_width - 2)}|{reset}
{light_red_border}| {green_text}dev:      {reset} {cyan_text}HypoNet{reset} {light_red_border}                            |
{light_red_border}| {green_text}telegram:  {reset} {cyan_text}https://t.me/join_hyponet{reset} {light_red_border}         |
{light_red_border}| {green_text}insta:    {reset} {cyan_text} https://www.instagram.com/hypo_net{reset} {light_red_border}|
{light_red_border}| {green_text}youtube:   {reset} {cyan_text}https://www.youtube.com/@Hypo-Net{reset} {light_red_border} |
{light_red_border}|{" " * (box_width - 2)}|{reset}
{light_red_border}{"_" * box_width}{reset}
"""

    print(banner_content)


if __name__ == "__main__":
    print_banner()





init(autoreset=True)
logging.basicConfig(level=logging.INFO)

url = "https://us-central1-amor-ai.cloudfunctions.net/chatWithGPT"
headers = {
    'User-Agent': "okhttp/5.0.0-alpha.2",
    'Accept-Encoding': "gzip",
    'content-type': "application/json; charset=utf-8"
}
bot_token = input(Fore.LIGHTRED_EX+"Enter your Bot Token:"+ Fore.LIGHTGREEN_EX)

conversation_history = {}
code_counter = 0
CHANNEL_USERNAME = input(Fore.LIGHTMAGENTA_EX+'Your channel with @:'+Fore.LIGHTCYAN_EX)

supported_languages = {
    'python': 'python',
    'html': 'html',
    'css': 'css',
    'javascript': 'javascript',
    'java': 'java',
    'c++': 'cpp',
    'php': 'php',
    'ruby': 'rb',
    'go': 'go',
    'swift': 'swift',
    'typescript': 'ts',
    'bash': 'sh',
    'kotlin': 'kt'
}

developer_response = "Shiahya is the developer of me! His channel: @join_hyponet"


async def check_channel_membership(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user_id = update.message.from_user.id
    try:
        chat_member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"Error checking channel membership: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    user_id = user.id
    user_name = user.full_name

    try:
        profile_pics = await context.bot.get_user_profile_photos(user_id)
        if profile_pics.photos:
            profile_pic_file_id = profile_pics.photos[0][0].file_id
            await context.bot.send_photo(
                chat_id=update.message.chat_id,
                photo=profile_pic_file_id,
                caption=f"<b>Heyy Buddy!\nWelcome!\nPlease Support Our Small Community={CHANNEL_USERNAME} ~HypoNet\nBuddy=⭕️{user_name}!</b>\nYour User ID: <code>{user_id}❗️</code>",
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                f"<b>Welcome:⭕️{user_name}!</b>\n\nYour User ID❗️: <code>{user_id}</code>",
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logging.error(f"No profile picture: {e}")
        await update.message.reply_text(
            f"<b>Welcome {user_name}!</b>\n\nYour User ID: <code>{user_id}</code>",
            parse_mode=ParseMode.HTML
        )

    if not await check_channel_membership(update, context):
        keyboard = [[InlineKeyboardButton("Join Channel", url=f"https://t.me/{CHANNEL_USERNAME.strip('@')}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "Buddy, please join our channel first to interact with me! 💕\n"
            f"Click the button below to join:\n[after join use /start]\n\n",
            reply_markup=reply_markup
        )
        return

    await context.bot.send_message(user_id, "Feel free to ask me anything! 🤖 What can I assist you with today?")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global code_counter
    user_id = update.message.chat.id
    user_message = update.message.text.lower()

    if any(keyword in user_message for keyword in ["who is your developer", "who created you", "who made you", "who developed you", "who are you made by", "your dev", "your developer"]):
        await context.bot.send_message(user_id, developer_response)
        return

    if user_id not in conversation_history:
        conversation_history[user_id] = []

    conversation_history[user_id].append({"role": "user", "content": update.message.text})

    payload = json.dumps({
        "data": {
            "messages": conversation_history[user_id]
        }
    })

    response = requests.post(url, data=payload, headers=headers)

    if response.status_code != 200:
        logging.error(Fore.RED + "Request failed with status code:", response.status_code)
        await context.bot.send_message(user_id, "Oops! Something went wrong. Let's try again!")
        return

    response_data = response.json()

    if 'result' in response_data and 'choices' in response_data['result']:
        content = response_data['result']['choices'][0]['message']['content']
        conversation_history[user_id].append({"role": "assistant", "content": content})

        code_counter += 1
        code_blocks = re.findall(r'```(.*?)\n(.*?)```', content, re.DOTALL)
        non_code_text = re.sub(r'```.*?```', '', content, flags=re.DOTALL).strip()

        response_message = non_code_text
        if response_message:
            response_message = f" {response_message} "

        if code_blocks:
            for language, code_block in code_blocks:
                language = language.strip().lower()
                lang = supported_languages.get(language, 'python')

                code_message = f"\n--- Code Number {code_counter} ({lang.upper()}) ---"
                response_message += code_message

                await context.bot.send_message(user_id, f"--- Code Number {code_counter} ({lang.upper()}) ---\n```\n{code_block.strip()}\n```")
                await send_code_as_file(code_block.strip(), non_code_text, language, user_id, context)

        await context.bot.send_message(user_id, response_message)
    else:
        await context.bot.send_message(user_id, "Uh-oh! I can't find my brain... I mean, the answer! 😅")

async def send_code_as_file(code: str, description: str, language: str, chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    file_extension = supported_languages.get(language, 'py')
    file_name = f"code.{file_extension}"
    file_stream = io.BytesIO(code.encode('utf-8'))
    file_stream.name = file_name
    file_stream.seek(0)

    await context.bot.send_message(chat_id, description)
    await context.bot.send_document(chat_id, file_stream)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error(f"Update {update} caused error {context.error}")
    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text="Oops! Something went wrong. Please don't worry, just try asking me something else! 😊"
    )

def main() -> None:

    application = ApplicationBuilder().token(bot_token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)

    application.run_polling()

if __name__ == "__main__":
    main()
"))